 private class AdaptiveMembershipOracle<I, O> implements MembershipOracle<I, O> {

        private final MealySimulatorOracle<I, O> simulator;
        private final Alphabet<I> alphabet;

        public AdaptiveOracle(MealySimulatorOracle<I, O> simulator, Alphabet<I> alphabet) {
            this.simulator = simulator;
            this.alphabet = alphabet;
        }

        @Override
        public Word<O> answerQuery(Word<I> query) {
            return simulator.answerQuery(query);
        }

        @Override
        public void processQueries(Iterable<? extends Query<I, Word<O>>> queries) {
            List<I> informativeInputs = new ArrayList<>();

            for (I input : alphabet) {
                DFAMealySimulatorOracle<I, O> dfaSimulator = new DFAMealySimulatorOracle<>(new MealySimulatorOracleState<>(hypothesis, Word.epsilon()), input);
                Word<O> output = answerQuery(dfaSimulator.getPrefix());

                if (output == null) {
                    informativeInputs.add(input);
                }
            }

            if (!informativeInputs.isEmpty()) {
                I selectedInput = informativeInputs.get(random.nextInt(informativeInputs.size()));
                Word<O> output = answerQuery(Word.fromLetter(selectedInput));
                queries.forEach(query -> query.answer(output));
            } else {
                // If all inputs are informative, select a random input
                I selectedInput = alphabet.get(random.nextInt(alphabet.size()));
                Word<O> output = answerQuery(Word.fromLetter(selectedInput));
                queries.forEach(query -> query.answer(output));
            }
        }
    }
}

